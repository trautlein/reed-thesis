role = Role)
start_cong <- 82
d %>% # strips out 3rd party, before cong 60, make party variable D or R instead of 100 or 200
mutate(leader = ifelse(role == "", NA, "Y")) %>%
filter((party == 100 | party == 200) & cong >= start_cong) %>%
mutate(party2 = ifelse(party == 100, "D","R")) %>%
select(-party) %>%
rename(party = party2) -> d1
#< Make party_cong_mean variable and ...
party_means <- data.frame(matrix(NA, nrow = 113, ncol = 0))
party_means$D     <- rep(NA, 113)
party_means$R     <- rep(NA, 113)
party_means$R_del <- rep(NA, 113)
party_means$D_del <- rep(NA, 113)
for(i in (start_cong+1):113) {
party_means$D[i]  <- mean(dplyr::filter(d1, cong == i & party == "D")$ideo)
party_means$R[i]  <- mean(dplyr::filter(d1, cong == i & party == "R")$ideo)
party_means$D_del[i] <- party_means$D[i] - party_means$D[i-1]
party_means$R_del[i] <- party_means$R[i] - party_means$R[i-1]
}
d2 <- dplyr::mutate(d1, party_cong_mean = ifelse(party=="D",
party_means$D[cong],
party_means$R[cong]))
d2 <- dplyr::mutate(d2, party_cong_mean_dif = ifelse(party=="D",
party_means$D_del[cong],
party_means$R_del[cong])) #>
#make last_cong_ideo variable
#d2 <- dplyr:: mutate(d2, last_cong_ideo = ifelse(cong > start_cong,
#                                                 ideo[cong - 1],
#                                                 NA))
dR <- d2 %>% filter(party == "R")
dD <- d2 %>% filter(party == "D")
summary(dD)
summary(dR)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
library(ggplot2)
library(dplyr)
library(tidyr)
options(scipen = 10)
#setwd("~/Insync/thesis/")
#setwd("/Volumes/TRAUTLEIN/thesis")
#d <- read.csv("~/Insync/thesis/data/SenateData002.csv")
d <- read.csv("data/SenateData002.csv")
d <- d[,c("Cong.","ICPSR", "State.Code", "State", "Party", "Name", "X1st.Dim.", "X2nd.Dim.", "Role")]
d <- dplyr::rename(d, cong = Cong.,
icpsr = ICPSR,
statecode = State.Code,
state = State,
party = Party,
name = Name,
ideo = X1st.Dim.,
x2 = X2nd.Dim.,
role = Role)
names(d)
start_cong <- 82
d1 <- d %>% # strips out 3rd party, before cong 60, make party variable D or R instead of 100 or 200
mutate(leader = ifelse(role == "", NA, "Y")) %>%
filter((party == 100 | party == 200) & cong >= start_cong) %>%
mutate(party2 = ifelse(party == 100, "D","R")) %>%
select(-party) %>%
rename(party = party2)
#< Make party_cong_mean variable and ...
#party_means <- data.frame(matrix(NA, nrow = 113, ncol = 0))
#party_means$D     <- rep(NA, 113)
#party_means$R     <- rep(NA, 113)
#party_means$R_del <- rep(NA, 113)
#party_means$D_del <- rep(NA, 113)
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
#for(i in (start_cong+1):113){
#  party_means$D[start_cong - i]  <- mean(dplyr::filter(d1, cong == i & party == "D")$ideo)
#  party_means$R[start_cong - i]  <- mean(dplyr::filter(d1, cong == i & party == "R")$ideo)
#}
#for(i in 2:nrow(party_means_table)){
#  party_means$D_del[i] <- party_means$D[i] - party_means$D[i - 1]
#  party_means$R_del[i] <- party_means$R[i] - party_means$R[i - 1]
#}
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_dif <- party_means_wide %>%
select(cong, D_del, R_del) %>%
rename(D = D_del, R = R_del) %>%
gather(key = party, value = party_del, D:R)
#d2 <- dplyr::mutate(d1, party_cong_mean = ifelse(party=="D",
#                                                 party_means$D[cong],
#                                                 party_means$R[cong]))
d2 <- d1
for(i in seq_along(nrow(d1))){
d2$party_cong_mean[i] <- lookup(df = party_means_table,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$party_cong_mean_dif[i] <- lookup(df = party_means_dif,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$last_cong_ideo[i] <- ifelse(d1$cong[i] > start_cong,
lookup(df = party_means_table,
val1 = d1$cong[i] - 1,
val2 = d1$party[i]),
NA)
}
#d2 <- dplyr::mutate(d2, party_cong_mean_dif = ifelse(party=="D",
#                                                 party_means$D_del[cong],
#                                                 party_means$R_del[cong])) #>
#make last_cong_ideo variable
#d2 <- dplyr:: mutate(d2, last_cong_ideo = ifelse(cong > start_cong,
#                                                 ideo[cong - 1],
#                                                 NA))
#d2 <- dplyr::mutate(d2, person_dif = ideo$cong - ideo$(cong-1))
#for(i in 1:length(d1)) {
#  ifelse(d1$role[i] == "", d1$role <- NA, d1$role <- d1$role)
#}
ggplot(dplyr::filter(d2, cong > 90), aes(cong, ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red"))
ggplot(dplyr::filter(d2, cong > 90, party = "D"), aes(cong, ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue"))
ggplot(dplyr::filter(d2, cong > 90, party == "D"), aes(cong, ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue"))
for(i in seq_along(nrow(d1))){
d2$party_cong_mean[i] <- lookup(df = party_means_table,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$party_cong_mean_dif[i] <- lookup(df = party_means_dif,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$last_cong_ideo[i] <- ifelse(d1$cong[i] > start_cong,
lookup(df = party_means_table,
val1 = d1$cong[i] - 1,
val2 = d1$party[i]),
NA)
}
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
party_means_table
party_means_table
View(party_means_table)
View(party_means_table)
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
library(tidyr)
install.packages("tidyr")
library(tidyr)
options(scipen = 10)
#setwd("~/Insync/thesis/")
#setwd("/Volumes/TRAUTLEIN/thesis")
#d <- read.csv("~/Insync/thesis/data/SenateData002.csv")
d <- read.csv("data/SenateData002.csv")
d <- d[,c("Cong.","ICPSR", "State.Code", "State", "Party", "Name", "X1st.Dim.", "X2nd.Dim.", "Role")]
d <- dplyr::rename(d, cong = Cong.,
icpsr = ICPSR,
statecode = State.Code,
state = State,
party = Party,
name = Name,
ideo = X1st.Dim.,
x2 = X2nd.Dim.,
role = Role)
names(d)
start_cong <- 82
d1 <- d %>% # strips out 3rd party, before cong 60, make party variable D or R instead of 100 or 200
mutate(leader = ifelse(role == "", NA, "Y")) %>%
filter((party == 100 | party == 200) & cong >= start_cong) %>%
mutate(party2 = ifelse(party == 100, "D","R")) %>%
select(-party) %>%
rename(party = party2)
#< Make party_cong_mean variable and ...
#party_means <- data.frame(matrix(NA, nrow = 113, ncol = 0))
#party_means$D     <- rep(NA, 113)
#party_means$R     <- rep(NA, 113)
#party_means$R_del <- rep(NA, 113)
#party_means$D_del <- rep(NA, 113)
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
View(party_means_wide)
View(party_means_wide)
View(party_means_table)
View(party_means_table)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
party_means_wide
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_dif <- party_means_wide %>%
select(cong, D_del, R_del) %>%
rename(D = D_del, R = R_del) %>%
gather(key = party, value = party_del, D:R)
View(party_means_dif)
View(party_means_dif)
d2 <- d1
for(i in seq_along(nrow(d1))){
d2$party_cong_mean[i] <- lookup(df = party_means_table,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$party_cong_mean_dif[i] <- lookup(df = party_means_dif,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$last_cong_ideo[i] <- ifelse(d1$cong[i] > start_cong,
lookup(df = party_means_table,
val1 = d1$cong[i] - 1,
val2 = d1$party[i]),
NA)
}
View(d2)
View(d2)
ggplot(dplyr::filter(d2, cong > 90), aes(cong, ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red"))
ggplot(dplyr::filter(d2, cong > 90, party == "D"), aes(cong, ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue"))
ggplot(dplyr::filter(d1, cong > 90), aes(cong, ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red"))
leahy <- dplyr::filter(d, icpsr == 14307)
ggplot(leahy, aes(cong, ideo)) + geom_point()
ggplot(dplyr::filter(d1, cong >= 110), aes(ideo, x2, color=party)) + geom_point() +
scale_color_manual(values=c("blue", "red"))
ggplot(dplyr::filter(d1, cong >= 111), aes(ideo, x2, color=party)) + geom_point() +
scale_color_manual(values=c("blue", "red"))
cong113 <- dplyr::filter(d1, cong == 113)
ggplot(cong113, aes(ideo, color = party)) + geom_histogram(binwidth = 0.025)
cong113 <- dplyr::filter(d1, cong == 113)
ggplot(cong113, aes(ideo, color = party)) + geom_histogram(binwidth = 0.025)
ggplot(dplyr::filter(d1, cong > 90), aes(cong, ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red"))
View(party_means_wide)
View(party_means_wide)
View(party_means_table)
View(party_means_table)
library(ggplot2)
library(dplyr)
library(tidyr)
options(scipen = 10)
#setwd("~/Insync/thesis/")
#setwd("/Volumes/TRAUTLEIN/thesis")
#d <- read.csv("~/Insync/thesis/data/SenateData002.csv")
d <- read.csv("data/SenateData002.csv")
d <- d[,c("Cong.","ICPSR", "State.Code", "State", "Party", "Name", "X1st.Dim.", "X2nd.Dim.", "Role")]
d <- read.csv("data/SenateData002.csv")
d <- d[,c("Cong.","ICPSR", "State.Code", "State", "Party", "Name", "X1st.Dim.", "X2nd.Dim.", "Role")]
d <- dplyr::rename(d, cong = Cong.,
icpsr = ICPSR,
statecode = State.Code,
state = State,
party = Party,
name = Name,
ideo = X1st.Dim.,
x2 = X2nd.Dim.,
role = Role)
names(d)
start_cong <- 82
d1 <- d %>% # strips out 3rd party, before cong 60, make party variable D or R instead of 100 or 200
mutate(leader = ifelse(role == "", NA, "Y")) %>%
filter((party == 100 | party == 200) & cong >= start_cong) %>%
mutate(party2 = ifelse(party == 100, "D","R")) %>%
select(-party) %>%
rename(party = party2)
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
View(party_means_table)
View(party_means_table)
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
View(party_means_wide)
View(party_means_wide)
qplot(data = party_means_wide, cong, D)
qplot(data = party_means_wide, cong, R)
qplot(data = party_means_wide, cong, R) + qplot(data = party_means_wide, cong, D)
ggplot(data = party_means_wide, aes(cong, D)) + geom_point()
ggplot(data = party_means_wide, aes(cong, D, R)) + geom_point()
ggplot(data = party_means_wide, aes(cong, R, D)) + geom_point()
ggplot(data = party_means_table, aes(cong, mean_ideo)) + geom_point()
ggplot(data = party_means_table, aes(cong, mean_ideo, color = party)) + geom_point()
ggplot(data = party_means_table, aes(cong, mean_ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red"))
ggplot(data = party_means_table, aes(cong, mean_ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red")) + coord_cartesian(xlim = c(-5000, 5000))
ggplot(data = party_means_table, aes(cong, mean_ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red")) + coord_cartesian(ylim = c(-0.5, 0.5))
ggplot(data = party_means_table, aes(cong, mean_ideo, color = party)) + geom_point() +
scale_color_manual(values=c("blue", "red")) + coord_cartesian(ylim = c(-0.8, 0.8))
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
?acf
acf(party_means_wide$D)
acf(party_means_wide$R)
acf(party_means_wide$R, type = "covariance")
acf(party_means_wide$R)
acf(party_means_wide$R, type = "covariance")
?lag
library(stats)
lag(party_means_wide$D, k = 1)
party_means_dif <- party_means_wide %>%
select(cong, D_del, R_del) %>%
rename(D = D_del, R = R_del) %>%
gather(key = party, value = party_del, D:R)
View(party_means_dif)
View(party_means_dif)
d2 <- d1
d2 <- d1
for(i in seq_along(nrow(d1))){
d2$party_cong_mean[i] <- lookup(df = party_means_table,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$party_cong_mean_dif[i] <- lookup(df = party_means_dif,
val1 = d1$cong[i],
val2 = d1$party[i])
d2$last_cong_ideo[i] <- ifelse(d1$cong[i] > start_cong,
lookup(df = party_means_table,
val1 = d1$cong[i] - 1,
val2 = d1$party[i]),
NA)
}
View(d2)
View(d2)
View(d1)
View(d1)
summary(d2$party_cong_mean)
sample(d2$party_cong_mean)
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_dif <- party_means_wide %>%
select(cong, D_del, R_del) %>%
rename(D = D_del, R = R_del) %>%
gather(key = party, value = party_del, D:R)
View(party_means_wide)
View(party_means_wide)
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_wide <- dplyr::mutate(party_means_wide, D_lagged = lag(D, k = 1))
party_means_wide <- dplyr::mutate(party_means_wide, D_lagged = lag(party_means_wide$D, k = 1))
party_means_wide <- dplyr::mutate(party_means_wide, D_lagged = lag(D, k = 1))
party_means_wide <- dplyr::mutate(party_means_wide, D_lagged = lag(D, k = 1))
party_means_wide[-1]
d1 <- d %>% # strips out 3rd party, before cong 60, make party variable D or R instead of 100 or 200
mutate(leader = ifelse(role == "", NA, "Y")) %>%
filter((party == 100 | party == 200) & cong >= start_cong) %>%
mutate(party2 = ifelse(party == 100, "D","R")) %>%
select(-party) %>%
rename(party = party2)
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
#for(i in (start_cong+1):113){
#  party_means$D[start_cong - i]  <- mean(dplyr::filter(d1, cong == i & party == "D")$ideo)
#  party_means$R[start_cong - i]  <- mean(dplyr::filter(d1, cong == i & party == "R")$ideo)
#}
#for(i in 2:nrow(party_means_table)){
#  party_means$D_del[i] <- party_means$D[i] - party_means$D[i - 1]
#  party_means$R_del[i] <- party_means$R[i] - party_means$R[i - 1]
#}
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_wide <- dplyr::mutate(party_means_wide, D_lagged = lag(c, k = 1))
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
d1 <- d %>% # strips out 3rd party, before cong 60, make party variable D or R instead of 100 or 200
mutate(leader = ifelse(role == "", NA, "Y")) %>%
filter((party == 100 | party == 200) & cong >= start_cong) %>%
mutate(party2 = ifelse(party == 100, "D","R")) %>%
select(-party) %>%
rename(party = party2)
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
#for(i in (start_cong+1):113){
#  party_means$D[start_cong - i]  <- mean(dplyr::filter(d1, cong == i & party == "D")$ideo)
#  party_means$R[start_cong - i]  <- mean(dplyr::filter(d1, cong == i & party == "R")$ideo)
#}
#for(i in 2:nrow(party_means_table)){
#  party_means$D_del[i] <- party_means$D[i] - party_means$D[i - 1]
#  party_means$R_del[i] <- party_means$R[i] - party_means$R[i - 1]
#}
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1),
D_del = D - D_lagged,
R_del = R - R_lagged)
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1),
R_lagged = lag(R, k = 1))
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1))
?lag
party_means_wide <- dplyr::mutate(party_means_wide, D_lagged = lag(D, k = 1))
rm(party_means_wide)
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1))
party_means_wide <- dplyr::mutate(party_means_wide, D_laggedd = lag(D, k = 1))
rm(party_means_wide)
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D))
View(party_means_wide)
View(party_means_wide)
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(party_means_wide$D, k = 1))
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1))
party_means_wide <- party_means_wide %>%
mutate(D_lagged = lag(D, k = 1))
d <- read.csv("data/SenateData002.csv")
d <- d[,c("Cong.","ICPSR", "State.Code", "State", "Party", "Name", "X1st.Dim.", "X2nd.Dim.", "Role")]
d <- dplyr::rename(d, cong = Cong.,
icpsr = ICPSR,
statecode = State.Code,
state = State,
party = Party,
name = Name,
ideo = X1st.Dim.,
x2 = X2nd.Dim.,
role = Role)
names(d)
start_cong <- 82
d1 <- d %>% # strips out 3rd party, before cong 60, make party variable D or R instead of 100 or 200
mutate(leader = ifelse(role == "", NA, "Y")) %>%
filter((party == 100 | party == 200) & cong >= start_cong) %>%
mutate(party2 = ifelse(party == 100, "D","R")) %>%
select(-party) %>%
rename(party = party2)
party_means_table <- d1 %>%
group_by(cong, party) %>%
summarise(mean_ideo = mean(ideo))
party_means_wide <- party_means_table %>%
spread(key = party, value = mean_ideo)
lookup <- function(df, val1, val2, col = 3){
df[df[1] == val1 & df[2] == val2, col][1]
}
d1[1]
df[2]
d1[2]
colnames(d1)
lookup(d1, 113, 40915)
d1[56]
d1[, 56]
d1[56, ]
d1[56, 2]
